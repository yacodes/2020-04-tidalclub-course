-- #1 Continuous patterns - sine, square, tri, saw and random functions
-- https://club.tidalcycles.org/t/week-4-lesson-1-continuous-patterns-sine-square-tri-saw-and-random-functions/608

d1 $ s "bd*8" # speed (sine + 0.5)

d1 $ s "bd*8" # speed (range 0.5 1.5 sine)

d1 $ speed (range 0.5 2.5 sine) # s "bd" -- nothing happens, because sine doesn't triggering any events

d1 $ speed (segment 16 $ range 0.5 2.5 sine) # s "bd" -- create regular interval for 16 events

d1 $ speed (struct "t(7, 16)" $ range 0.5 2.5 sine) # s "bd"

d1 $ speed (struct "f(7, 16)" $ range 0.5 2.5 sine) # s "bd" -- inverse euclidian pattern

d1 $ speed (struct "<f t>(7, 16)" $ range 0.5 2.5 sine) # s "bd"

d1 $ s "bd*8" # speed (slow 2 $ range 0.5 1.5 sine)

d1 $ jux rev $ s "bd*32" # speed (iter 4 $ range 0.5 1.5 sine)

d1 $ s "bd*32" # speed (range 0.5 2.5 square)

d1 $ s "bd*32" # speed (range 0.5 2.5 tri)

d1 $ s "bd*32" # speed (range 0.5 2.5 saw)

d1 $ s "bd*32" # room 0.6 # sz (slow 4 saw)

d1 $ s "bd*32" # room 0.6 # sz (slow 4 saw)

d1 $ s "bd*32" # speed (range 0.5 2.5 (sine * (slow 2 tri)))

d1 $ s "bd*8" # speed rand

d1 $ s "bd*8" # speed (rand + 1)

d1 $ s "bd*8" # speed (range 1 3 perlin)

hush

-- #2 Random marathon: rand, irand, mininotation randomness, scramble, shuffle, choose + more
-- https://club.tidalcycles.org/t/week-4-lesson-2-random-marathon-rand-irand-mininotation-randomness-scramble-shuffle-choose-more/685


-- rand
d1 $ fast 2 $ n "0 1 3 1" # s "arp" # speed (rand + 1) # cut 1

d1 $ repeatCycles 4 $ fast 2 $ n "0 1 3 1" # s "arp" # speed (rand + 1) # cut 1 -- Repeats random seq for 4 times

resetCycles -- resets cycles to 0 == reset randomness too


-- irand
d1 $ n (struct "t(5, 8)" $ irand 8) # s "feel"


-- [|]
-- ?
d1 $ fast 4 $ n "[0|1|2*2|3 4 5]" # sound "industrial" -- ossia?

d1 $ sound "bd bd bd sn:1?" -- sn 50/50

d1 $ sound "bd bd bd sn:1?0.9" -- sn 10/90


-- scramble
d1 $ scramble 4 $ n "0 1 2 3" # s "arpy" -- plays random bit every time. can play 0 for 4 times

d1 $ scramble 4 $ n "[0 1] [2 3] [4 5] [6 7]" # s "arpy" -- plays random bit every time, but grouped

-- shuffle
d1 $ shuffle 4 $ n "[0 1] [2 3] [4 5] [6 7]" # s "arpy" -- changing order of the pattern, can't play 0 for 4 time

-- choose
d1 $ s (segment 4 $ choose ["bd", "arpy", "gabba"])

d1 $ s (struct "t(5, 8, <0 2>)" $ choose ["bd", "arpy", "gabba"])

d1 $ s (struct "t(5, 8, <0 2>)" $ choose ["bd", "bd", "bd", "arpy", "gabba"])

-- wchoose
d1 $ s "bd*8" # squiz (wchoose [(1, 2), (4, 0.1), (10, 0.5)])

d1 $ s "bd*8" # pan rand # speed (range 1 3 $ rand) -- panning is getting the same random numbers: they are in the same random stream

d1 $ s "bd*8" # pan rand # speed (fast 1.01 $ range 1 3 $ rand) -- random streams are different, because of speeding speed stream up

hush
